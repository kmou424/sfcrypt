package main

import (
	"os"
	"runtime"
	"text/template"
	"time"
)

var buildInfoTmpl = `// Code generated by gen-buildinfo.go; DO NOT EDIT.
package buildinfo

import (
	"fmt"
	"runtime/debug"
)

// BuildInfo contains information about the build
var (
	BuildDate   = "{{.BuildDate}}"
    VCSRevision = getVCSRevision()
	GoVersion   = "{{.GoVersion}}"
	Debug       = {{.Debug}}
)

func getVCSRevision() string {
	if info, ok := debug.ReadBuildInfo(); ok {
		var (
			vcs    string
			rev    string
			suffix string
		)
		for _, setting := range info.Settings {
			switch setting.Key {
			case "vcs":
				vcs = setting.Value
			case "vcs.revision":
				rev = setting.Value
			case "vcs.modified":
				if setting.Value == "true" {
					suffix = "-dirty"
				}
			}
		}
		return fmt.Sprintf("%s:%s%s", vcs, rev, suffix)
	}
	return "unknown"
}
`

var (
	release bool
)

func readEnvs() {
	if os.Getenv("SFCRYPT_RELEASE") == "1" {
		release = true
	}
}

func init() {
	readEnvs()
}

func main() {
	tmpl, _ := template.New("build_info").Parse(buildInfoTmpl)
	file, _ := os.OpenFile("app/buildinfo/generated_build_info.go", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644)

	_ = tmpl.Execute(file, map[string]any{
		"BuildDate": getBuildDate(),
		"GoVersion": runtime.Version(),
		"Debug":     !release,
	})
}

// getBuildDate retrieves the current build date.
func getBuildDate() string {
	return time.Now().Format("2006-01-02 15:04:05")
}
