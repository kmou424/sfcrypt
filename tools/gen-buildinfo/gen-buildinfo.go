package main

import (
	"os"
	"os/exec"
	"runtime"
	"strings"
	"text/template"
	"time"
)

var buildInfoTmpl = `// Code generated by gen-buildinfo.go; DO NOT EDIT.
package buildinfo

// BuildInfo contains information about the build
var (
	GitCommit = "{{.GitCommit}}"
	BuildDate = "{{.BuildDate}}"
	GoVersion = "{{.GoVersion}}"
)`

func main() {
	tmpl, _ := template.New("build_info").Parse(buildInfoTmpl)
	file, _ := os.OpenFile("app/buildinfo/generated_build_info.go", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644)
	_ = tmpl.Execute(file, map[string]any{
		"GitCommit": getGitCommit(),
		"BuildDate": getBuildDate(),
		"GoVersion": runtime.Version(),
	})
}

// getGitCommit retrieves the current git commit hash.
// If it fails, it returns "unknown".
func getGitCommit() string {
	cmd := exec.Command("git", "rev-parse", "HEAD")
	output, err := cmd.Output()
	if err != nil {
		return "unknown"
	}
	commit := strings.TrimSpace(string(output))
	if !isGitTreeClean() {
		commit += "-dirty"
	}
	return commit
}

// isGitTreeClean checks if the git tree is clean.
func isGitTreeClean() bool {
	cmd := exec.Command("git", "status", "--porcelain")
	output, err := cmd.Output()
	if err != nil {
		return false
	}
	return len(output) == 0
}

// getBuildDate retrieves the current build date.
func getBuildDate() string {
	return time.Now().Format("2006-01-02 15:04:05")
}
